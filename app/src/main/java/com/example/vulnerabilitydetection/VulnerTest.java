package com.example.vulnerabilitydetection;

import androidx.annotation.NonNull;
import androidx.appcompat.app.AppCompatActivity;

import android.app.LoaderManager;
import android.content.Context;
import android.content.Intent;
import android.content.Loader;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.net.ConnectivityManager;
import android.net.Uri;
import android.os.AsyncTask;
import android.os.Bundle;
import android.os.Looper;
import android.os.Parcelable;
import android.util.Log;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.TextView;
import android.widget.Toast;

import com.android.volley.Request;
import com.android.volley.RequestQueue;
import com.android.volley.Response;
import com.android.volley.VolleyError;
import com.android.volley.toolbox.StringRequest;
import com.android.volley.toolbox.Volley;
import com.mikhaellopez.circularimageview.CircularImageView;

import org.json.JSONException;
import org.json.JSONObject;
import org.w3c.dom.Text;
import android.os.Handler;

import java.io.InputStream;
import java.io.Serializable;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;

import pl.droidsonroids.gif.GifImageView;

public class VulnerTest extends AppCompatActivity implements LoaderManager.LoaderCallbacks<Map<String,String> >{
  ImageView icon;
  TextView  appName;
    String packageName;
    String appNameString;
    String iconUrl;
    Button b;

    GifImageView gif;
    CircularImageView civ;
    Button bt;
    TextView tv;

    public static final int APP_LOADER_ID=2;
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_vulner_test);
        getSupportActionBar().setTitle("App Detect");
        Intent i=getIntent();
        Bundle bundle=i.getExtras();
        packageName=bundle.getString("VulnerAppListPack");
        appNameString=bundle.getString("VulnerAppListApp");
        b=(Button)findViewById(R.id.test);
        icon=(ImageView)findViewById(R.id.icon);
        appName=(TextView) findViewById(R.id.name_VT);
        appName.setText(appNameString);
        ConnectivityManager conMgr = (ConnectivityManager) getSystemService (Context.CONNECTIVITY_SERVICE);
        if(conMgr.getActiveNetworkInfo()!=null&&conMgr.getActiveNetworkInfo().isConnected()&&conMgr.getActiveNetworkInfo().isAvailable())
            getLoaderManager().initLoader(APP_LOADER_ID,null,this);


    }

    @NonNull
    @Override
    public Loader<Map<String,String> > onCreateLoader(int id, Bundle args) {
        Uri.Builder builder=new Uri.Builder();
        builder.scheme("https")
                .authority("gplayapi.srik.me")
                .path("api")
                .appendPath("apps")
                .appendPath("")
                .appendPath(packageName)
                .appendPath("dataSafety");
        Uri addressUri=builder.build();
        String packageUriString=addressUri.toString();
        VulnerLoader loader = new VulnerLoader(this, packageUriString);
        return loader;
    }

    @Override
    public void onLoadFinished(@NonNull Loader<Map<String,String> > loader,     Map<String,String>  params) {
        if (params == null)
            return;
        Log.e("VulnerTest",params.size()+"");
        iconUrl=(String)params.remove("MyIcon");
        ImageLoadAsyncTask task = new ImageLoadAsyncTask();
        task.execute(iconUrl);
        listener(params);

    }


    @Override
    public void onLoaderReset(@NonNull Loader<Map<String,String> > loader) {

//        MainActivity.itemsAdapter.clear();
    }
    private void listener( Map<String,String>  params){

        b.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
              Intent i=new Intent(VulnerTest.this,ResultActivity.class);
               i.putExtra("VulnerTest", (Serializable) params);
               startActivity(i);
            }
        });
    }
    public boolean onCreateOptionsMenu(Menu menu) {
        getMenuInflater().inflate(R.menu.menu_type_custom, menu);
        return true;
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        switch (item.getItemId()) {
            case R.id.action_home:
                Intent i=new Intent(VulnerTest.this,MainActivityOrigin.class);
                startActivity(i);
                finish();
                return true;

        }
        return super.onOptionsItemSelected(item);
    }
    private class ImageLoadAsyncTask extends AsyncTask<String, Void, Bitmap> {
        @Override
        protected Bitmap doInBackground(String... strings) {

            try {
                URL urlConnection = new URL(strings[0]);
                HttpURLConnection connection = (HttpURLConnection) urlConnection
                        .openConnection();
                connection.setDoInput(true);
                connection.connect();
                InputStream input = connection.getInputStream();
                Bitmap myBitmap = BitmapFactory.decodeStream(input);
                return myBitmap;
            } catch (Exception e) {
                e.printStackTrace();
            }
            return null;
        }

        @Override
        protected void onPostExecute(Bitmap result) {
            super.onPostExecute(result);
            icon.setImageBitmap(result);

            gif = findViewById(R.id.g2);
            tv = findViewById(R.id.name_VT);
            bt = findViewById(R.id.test);
            civ = findViewById(R.id.icon);

            gif.setVisibility(View.GONE);
            tv.setVisibility(View.VISIBLE);
            bt.setVisibility(View.VISIBLE);
            civ.setVisibility(View.VISIBLE);
        }
    }
}