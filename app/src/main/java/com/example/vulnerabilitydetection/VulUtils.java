package com.example.vulnerabilitydetection;

import android.util.Log;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import java.nio.charset.Charset;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.Map;
import java.util.Set;

public class VulUtils {
    /** Tag for the log messages */
    public static final String LOG_TAG = AppUtils.class.getSimpleName();

    private VulUtils() {
    }



    public static Map<String, String> extractApps(String requestUrl) {

         String requestUrl2=StrTrim(requestUrl,"dataSafety");
        URL url = createUrl(requestUrl);
        URL url2 = createUrl(requestUrl2);
        Log.e("VUtilss",requestUrl);
        Log.e("VUtilss",requestUrl2);

        String jsonResponse = null;
        String jsonResponse2 = null;
        try {
            jsonResponse = makeHttpRequest(url);
        } catch (IOException e) {
            Log.e(LOG_TAG, "Error closing input stream", e);
        }
        try {
            jsonResponse2 = makeHttpRequest(url2);
        } catch (IOException e) {
            Log.e(LOG_TAG, "Error closing input stream", e);
        }


        JSONObject jsonobject= null;
        try {
            jsonobject = new JSONObject(jsonResponse);
        } catch (JSONException e) {
            Log.e("QueryUtils", "Problem parsing the earthquake JSON results", e);
        }
        JSONObject jsonObjectRes=jsonobject.optJSONObject("results");
        JSONArray collectedData=jsonObjectRes.optJSONArray("collectedData");
        Map<String, Boolean> params = new HashMap<String,Boolean>();

        params.put("Location",false);
        params.put("Personal info",false);
        params.put("Financial info",false);
        params.put("Health and Fitness",false);
        params.put("Messages",false);
        params.put("Photos and videos",false);
        params.put("Audio",false);
        params.put("Files and docs",false);
        params.put("Contacts",false);
        params.put("App activity",false);
        params.put("App info and performance",false);
        params.put("Device or other IDs",false);

        Log.e("VUtils",collectedData.length()+"");
        for (Map.Entry<String,Boolean> entry : params.entrySet()) {
                for(int j=0;j<collectedData.length();j++){
                    try {
                      String type=  collectedData.getJSONObject(j).optString("type");
                        Log.e("VUtils",type);
                      if(type.equalsIgnoreCase(entry.getKey())){

                          Boolean b=collectedData.getJSONObject(j).optBoolean("optional");
                          Boolean a=entry.getValue()|b;
                          entry.setValue(a);
                      }
                    } catch (JSONException e) {
                        e.printStackTrace();
                    }
                }
        }
        Map<String,String> paramsFinal=new HashMap<String,String>();

        for (Map.Entry<String,Boolean> entry : params.entrySet()) {
            Log.e("VUtils", "Key = " + entry.getKey() +
                    ", Value = " + entry.getValue());
            if(entry.getValue()){
                paramsFinal.put(entry.getKey(),"1");
            }
            else{
                paramsFinal.put(entry.getKey(),"0");
            }
        }





        JSONObject jsonobject2= null;
        try {
            jsonobject2 = new JSONObject(jsonResponse2);
        } catch (JSONException e) {
            Log.e("VUtils", "Problem parsing the data collected vector JSON results", e);
        }
        String genre=jsonobject2.optString("genre");
        Log.e("VUtilss",genre);
        String icon=jsonobject2.optString("icon");
        Log.e("VUtilss",icon);

        paramsFinal.put("MyGenre",genre);
        paramsFinal.put("MyIcon",icon);
        return paramsFinal;

    }




    /**
     * Returns new URL object from the given string URL.
     */
    private static URL createUrl(String stringUrl) {
        URL url = null;
        try {
            url = new URL(stringUrl);
        } catch (MalformedURLException e) {
            Log.e(LOG_TAG, "Error with creating URL ", e);
        }
        return url;
    }

    /**
     * Make an HTTP request to the given URL and return a String as the response.
     */
    //

    private static String makeHttpRequest(URL url) throws IOException {
        String jsonResponse = "";

        // If the URL is null, then return early.
        if (url == null) {
            return jsonResponse;
        }

        HttpURLConnection urlConnection = null;
        InputStream inputStream = null;
        try {
            urlConnection =  (HttpURLConnection) url.openConnection();
            urlConnection.setReadTimeout(10000 /* milliseconds */);
            urlConnection.setConnectTimeout(15000 /* milliseconds */);
            urlConnection.setRequestMethod("GET");
            urlConnection.connect();

            // If the request was successful (response code 200),
            // then read the input stream and parse the response.
            if (urlConnection.getResponseCode() == 200) {
                inputStream = urlConnection.getInputStream();
                jsonResponse = readFromStream(inputStream);
            } else {
                Log.e(LOG_TAG, "Error response code: " + urlConnection.getResponseCode());
            }
        } catch (IOException e) {
            Log.e(LOG_TAG, "Problem retrieving the earthquake JSON results.", e);
        } finally {
            if (urlConnection != null) {
                urlConnection.disconnect();
            }
            if (inputStream != null) {
                inputStream.close();
            }
        }
        return jsonResponse;
    }

    /**
     * Convert the {@link InputStream} into a String which contains the
     * whole JSON response from the server.
     */
    private static String readFromStream(InputStream inputStream) throws IOException {
        StringBuilder output = new StringBuilder();
        if (inputStream != null) {
            //  InputStreamReader inputStreamReader = new InputStreamReader(inputStream, StandardCharsets.UTF_8);
            InputStreamReader inputStreamReader = new InputStreamReader(inputStream, Charset.forName("UTF-8"));
            BufferedReader reader = new BufferedReader(inputStreamReader);
            String line = reader.readLine();
            while (line != null) {
                output.append(line);
                line = reader.readLine();
            }
        }
        return output.toString();
    }
    private static String StrTrim(String requestUrl, String word){
        String msg[] = requestUrl.split("/");
        String new_str = "";

        // Iterating the string using for each loop
        for (String words : msg) {

            // If desired word is found
            if (!words.equals(word)) {

                // Concat the word not equal to the given
                // word
                Log.e("VUtilss",words);
                new_str += words + "/";
            }
        }

        // Print the new String
        return new_str;
    }
}
