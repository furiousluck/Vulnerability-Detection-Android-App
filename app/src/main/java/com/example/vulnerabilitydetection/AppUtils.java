package com.example.vulnerabilitydetection;

import android.util.Log;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import java.nio.charset.Charset;
import java.util.ArrayList;
import java.util.LinkedHashSet;
import java.util.Set;

public class AppUtils {

    /** Tag for the log messages */
    public static final String LOG_TAG = AppUtils.class.getSimpleName();

    private AppUtils() {
    }



    public static DataSafetyComponents extractApps(String requestUrl) {
        Log.i(LOG_TAG,"extractEarthquakes method ");
        Log.e("AppUtils",requestUrl);
        URL url = createUrl(requestUrl);

        // Perform HTTP request to the URL and receive a JSON response back
        String jsonResponse = null;
        try {
            jsonResponse = makeHttpRequest(url);
        } catch (IOException e) {
            Log.e(LOG_TAG, "Error closing input stream", e);
        }

        DataSafetyComponents dataSafetyComponents;

        ArrayList<SharedData> sUtils = new ArrayList<>();
        ArrayList<CollectedData> cUtils=new ArrayList<>();
        ArrayList<SecurityPractices> secUtils=new ArrayList<>();
        PrivacyPolicyUrl pUtils = null;


        try {
            JSONObject jsonobject=new JSONObject(jsonResponse);
            JSONObject jsonObjectRes=jsonobject.optJSONObject("results");

            JSONArray jsonArrayShared=jsonObjectRes.optJSONArray("sharedData");
            ArrayList<JSONObject> Shared=new ArrayList<JSONObject>();
            Set<String> setShared = new LinkedHashSet<String>();

            for(int i=0;i<jsonArrayShared.length();i++){
                Shared.add(jsonArrayShared.optJSONObject(i));
                setShared.add(Shared.get(i).optString("type"));
            }
            ArrayList<String> data = new ArrayList<String>();
            ArrayList<String> purpose = new ArrayList<String>();
            for(String i:setShared){
                for(int j=0;j<Shared.size();j++){
                    if(i.equalsIgnoreCase(Shared.get(j).optString("type"))){
                        data.add(Shared.get(j).optString("data"));
                        purpose.add(Shared.get(j).optString("purpose"));
                    }

                }

                for(int k=0;k<data.size();k++){

                    Log.e(i,data.get(k)+"\n"+purpose.get(k));
                }
                sUtils.add(new SharedData(i,data,purpose));
                data.clear();
                purpose.clear();

            }

            JSONArray jsonArrayCollected=jsonObjectRes.optJSONArray("collectedData");
            ArrayList<JSONObject> Collected=new ArrayList<JSONObject>();
            Set<String> setCollected = new LinkedHashSet<String>();

            for(int i=0;i<jsonArrayCollected.length();i++){
                Collected.add(jsonArrayCollected.optJSONObject(i));
                setCollected.add(Collected.get(i).optString("type"));
            }
            data.clear();
            purpose.clear();
            for(String i:setCollected){
                for(int j=0;j<Collected.size();j++){
                    if(i.equalsIgnoreCase(Collected.get(j).optString("type"))){
                        data.add(Collected.get(j).optString("data"));
                        purpose.add(Collected.get(j).optString("purpose"));
                    }

                }

                for(int k=0;k<data.size();k++){

                    Log.e(i+"c",data.get(k)+"\n"+purpose.get(k));
                }
                cUtils.add(new CollectedData(i,data,purpose));
                data.clear();
                purpose.clear();

            }




            JSONArray jsonArraySecurity=jsonObjectRes.optJSONArray("securityPractices");
            ArrayList<JSONObject> Security=new ArrayList<JSONObject>();
            Set<String> setSecurity = new LinkedHashSet<String>();


            for(int i=0;i<jsonArraySecurity.length();i++){
                Security.add(jsonArraySecurity.optJSONObject(i));
                setSecurity.add(Security.get(i).optString("practice"));
            }
            data.clear();
            for(String i:setSecurity){
                for(int j=0;j<Security.size();j++){
                    if(i.equalsIgnoreCase(Security.get(j).optString("practice"))){
                        data.add(Security.get(j).optString("description"));

                    }

                }

                for(int k=0;k<data.size();k++){

                    Log.e(i+"sec",data.get(k));
                }
                secUtils.add(new SecurityPractices(i,data));
                data.clear();

            }


            String privacyPolicyUrl=jsonObjectRes.optString("privacyPolicyUrl");
            Log.e("p",privacyPolicyUrl);
            pUtils=new PrivacyPolicyUrl(privacyPolicyUrl);




        } catch (JSONException e) {
            Log.e("VUtils", "Problem parsing the dataSafetyComponents JSON results", e);
        }


        DataSafetyComponents components=new DataSafetyComponents(sUtils,cUtils,secUtils,pUtils);
        Log.e("AppUtils",components.getSharedData().size()+"");
        return components;
    }




    /**
     * Returns new URL object from the given string URL.
     */
    private static URL createUrl(String stringUrl) {
        URL url = null;
        try {
            url = new URL(stringUrl);
        } catch (MalformedURLException e) {
            Log.e(LOG_TAG, "Error with creating URL ", e);
        }
        return url;
    }

    /**
     * Make an HTTP request to the given URL and return a String as the response.
     */
    //

    private static String makeHttpRequest(URL url) throws IOException {
        String jsonResponse = "";

        // If the URL is null, then return early.
        if (url == null) {
            return jsonResponse;
        }

        HttpURLConnection urlConnection = null;
        InputStream inputStream = null;
        try {
            urlConnection =  (HttpURLConnection) url.openConnection();
            urlConnection.setReadTimeout(10000 /* milliseconds */);
            urlConnection.setConnectTimeout(15000 /* milliseconds */);
            urlConnection.setRequestMethod("GET");
            urlConnection.connect();

            // If the request was successful (response code 200),
            // then read the input stream and parse the response.
            if (urlConnection.getResponseCode() == 200) {
                inputStream = urlConnection.getInputStream();
                jsonResponse = readFromStream(inputStream);
            } else {
                Log.e(LOG_TAG, "Error response code: " + urlConnection.getResponseCode());
            }
        } catch (IOException e) {
            Log.e(LOG_TAG, "Problem retrieving the earthquake JSON results.", e);
        } finally {
            if (urlConnection != null) {
                urlConnection.disconnect();
            }
            if (inputStream != null) {
                inputStream.close();
            }
        }
        return jsonResponse;
    }

    /**
     * Convert the {@link InputStream} into a String which contains the
     * whole JSON response from the server.
     */
    private static String readFromStream(InputStream inputStream) throws IOException {
        StringBuilder output = new StringBuilder();
        if (inputStream != null) {
            //  InputStreamReader inputStreamReader = new InputStreamReader(inputStream, StandardCharsets.UTF_8);
            InputStreamReader inputStreamReader = new InputStreamReader(inputStream, Charset.forName("UTF-8"));
            BufferedReader reader = new BufferedReader(inputStreamReader);
            String line = reader.readLine();
            while (line != null) {
                output.append(line);
                line = reader.readLine();
            }
        }
        return output.toString();
    }

}
